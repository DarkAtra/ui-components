{"version":3,"sources":["../../core/dist/esm/ui-grid-item.entry.js","../../core/dist/esm/Common-663c63f4.js"],"names":["horizontalAlignContentToCssValueMap","verticalAlignContentToCssValueMap","directionToCssValueMap","UiGridItem","hostRef","registerInstance","this","spanColumns","spanRows","order","hAlignContent","vAlignContent","direction","h","Host","style","Object","assign","mapKeys","getValuePerBreakpointAndFillGaps","key","withBreakpointSuffix","mapValues","v","getBreakpointAwareValue","breakpoint","value","_a","fallback","_b","_c","_d","_e","_valueByBreakpoint","xs","sm","md","lg","xl","getValuePerBreakpoint","prevValue","name","classes","classNames","filter","className","join","isFixed","o","s","String","isNaN","isFinite","test","obj","mapper","a","entries","reduce","values"],"mappings":"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","file":"static/js/10.79797ba3.chunk.js","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-70254716.js';\nimport { m as mapKeys, w as withBreakpointSuffix, g as getValuePerBreakpointAndFillGaps, a as mapValues } from './Common-663c63f4.js';\n\nconst horizontalAlignContentToCssValueMap = {\n  'left': 'flex-start',\n  'center': 'center',\n  'right': 'flex-end',\n  'stretch': 'stretch',\n  'normal': 'normal'\n};\nconst verticalAlignContentToCssValueMap = {\n  'top': 'flex-start',\n  'center': 'center',\n  'bottom': 'flex-end',\n  'space-between': 'space-between',\n  'space-around': 'space-around',\n  'normal': 'normal'\n};\nconst directionToCssValueMap = {\n  'left-to-right': 'row',\n  'right-to-left': 'row-reverse',\n  'top-to-bottom': 'column',\n  'bottom-to-top': 'column-reverse'\n};\nconst UiGridItem = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.spanColumns = 1;\n    this.spanRows = 1;\n    this.order = 0;\n    this.hAlignContent = 'normal';\n    this.vAlignContent = 'normal';\n    this.direction = 'top-to-bottom';\n  }\n  render() {\n    return (h(Host, { style: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mapKeys(getValuePerBreakpointAndFillGaps(this.spanColumns, 1), key => withBreakpointSuffix('--grid-column', key))), mapKeys(getValuePerBreakpointAndFillGaps(this.spanRows, 1), key => withBreakpointSuffix('--grid-row', key))), mapKeys(getValuePerBreakpointAndFillGaps(this.order, 0), key => withBreakpointSuffix('--grid-order', key))), mapKeys(mapValues(getValuePerBreakpointAndFillGaps(this.hAlignContent, 'normal'), v => horizontalAlignContentToCssValueMap[v]), key => withBreakpointSuffix('--grid-horizontal-alignment', key))), mapKeys(mapValues(getValuePerBreakpointAndFillGaps(this.vAlignContent, 'normal'), v => verticalAlignContentToCssValueMap[v]), key => withBreakpointSuffix('--grid-vertical-alignment', key))), mapKeys(mapValues(getValuePerBreakpointAndFillGaps(this.direction, 'left-to-right'), v => directionToCssValueMap[v]), key => withBreakpointSuffix('--grid-direction', key))) }, h(\"slot\", null)));\n  }\n};\n\nexport { UiGridItem as ui_grid_item };\n","/**\n * Gets the value for the given {@link Breakpoint}.\n *\n * @param breakpoint the {@link Breakpoint} to get the value for\n * @param value the {@link BreakpointAwareValue}\n */\nconst getBreakpointAwareValue = (breakpoint, value) => {\n  var _a;\n  if (value === null) {\n    return null;\n  }\n  else if (!(value instanceof Object)) {\n    return breakpoint === 'xs' ? value : null;\n  }\n  else {\n    return (_a = value[breakpoint]) !== null && _a !== void 0 ? _a : null;\n  }\n};\n/**\n * Returns a map with each {@link Breakpoint} as key pointing to the {@link Breakpoint}'s value.\n *\n * @param value the {@link BreakpointAwareValue}\n */\nconst getValuePerBreakpoint = (value) => {\n  return {\n    xs: getBreakpointAwareValue('xs', value),\n    sm: getBreakpointAwareValue('sm', value),\n    md: getBreakpointAwareValue('md', value),\n    lg: getBreakpointAwareValue('lg', value),\n    xl: getBreakpointAwareValue('xl', value)\n  };\n};\n/**\n * Returns a map with each {@link Breakpoint} as key pointing to the {@link Breakpoint}'s value or if that value was null to the previous {@link Breakpoint}'s value.\n * If all {@link Breakpoint} values are null the fallback is used.\n *\n * @param value the {@link BreakpointAwareValue}\n * @param fallback the fallback value\n */\nconst getValuePerBreakpointAndFillGaps = (value, fallback) => {\n  var _a, _b, _c, _d, _e;\n  const _valueByBreakpoint = getValuePerBreakpoint(value);\n  let prevValue = fallback;\n  return {\n    xs: prevValue = (_a = getBreakpointAwareValue('xs', _valueByBreakpoint)) !== null && _a !== void 0 ? _a : prevValue,\n    sm: prevValue = (_b = getBreakpointAwareValue('sm', _valueByBreakpoint)) !== null && _b !== void 0 ? _b : prevValue,\n    md: prevValue = (_c = getBreakpointAwareValue('md', _valueByBreakpoint)) !== null && _c !== void 0 ? _c : prevValue,\n    lg: prevValue = (_d = getBreakpointAwareValue('lg', _valueByBreakpoint)) !== null && _d !== void 0 ? _d : prevValue,\n    xl: (_e = getBreakpointAwareValue('xl', _valueByBreakpoint)) !== null && _e !== void 0 ? _e : prevValue\n  };\n};\n/**\n * Returns the given name with the {@link Breakpoint}'s as suffix.\n *\n * @param name the name to suffix\n * @param breakpoint the {@link Breakpoint}\n */\nconst withBreakpointSuffix = (name, breakpoint) => {\n  return `${name}-${breakpoint}`;\n};\n\nconst classes = (...classNames) => {\n  return classNames.filter(className => !!className).join(' ');\n};\nconst isFixed = (o) => {\n  const s = String(o);\n  return !isNaN(+s) && isFinite(+s) && (typeof o === 'number' || !/e/i.test(s));\n};\nconst mapKeys = (obj, mapper = a => a) => {\n  return Object.entries(obj)\n    .reduce((values, [key, value]) => (Object.assign(Object.assign({}, values), { [mapper(key)]: value })), {});\n};\nconst mapValues = (obj, mapper = a => a) => {\n  return Object.entries(obj)\n    .reduce((values, [key, value]) => (Object.assign(Object.assign({}, values), { [key]: mapper(value) })), {});\n};\n\nexport { mapValues as a, classes as c, getValuePerBreakpointAndFillGaps as g, isFixed as i, mapKeys as m, withBreakpointSuffix as w };\n"],"sourceRoot":""}