{"version":3,"sources":["../../core/dist/esm/ui-spinner.entry.js","../../core/dist/esm/Common-663c63f4.js","../../core/dist/esm/ThemeColor-67f07c45.js"],"names":["UiSpinner","hostRef","registerInstance","this","themeColor","ThemeColor","PRIMARY","h","Host","xmlns","viewBox","style","Object","assign","getThemeColorRgbaStyles","getValuePerBreakpointAndFillGaps","fill","cx","cy","r","getBreakpointAwareValue","breakpoint","value","_a","fallback","_b","_c","_d","_e","_valueByBreakpoint","xs","sm","md","lg","xl","getValuePerBreakpoint","prevValue","withBreakpointSuffix","name","classes","classNames","filter","className","join","isFixed","o","s","String","isNaN","isFinite","test","mapKeys","obj","mapper","a","entries","reduce","values","key","mapValues","getThemeColorRgba","g","b","SECONDARY","INFO","SUCCESS","WARNING","DANGER","LIGHT","DARK","breakpointValues","v"],"mappings":"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","file":"static/js/9.6a4a9291.chunk.js","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-4d4f0883.js';\nimport { g as getValuePerBreakpointAndFillGaps } from './Common-663c63f4.js';\nimport { T as ThemeColor, g as getThemeColorRgbaStyles } from './ThemeColor-67f07c45.js';\n\nconst uiSpinnerCss = \":host{display:contents}:host svg{display:inline-flex;width:1em;height:1em;animation:spinner 1.4s linear infinite;--theme-color-r-xs:0;--theme-color-r-sm:0;--theme-color-r-md:0;--theme-color-r-lg:0;--theme-color-r-xl:0;--theme-color-g-xs:0;--theme-color-g-sm:0;--theme-color-g-md:0;--theme-color-g-lg:0;--theme-color-g-xl:0;--theme-color-b-xs:0;--theme-color-b-sm:0;--theme-color-b-md:0;--theme-color-b-lg:0;--theme-color-b-xl:0;--theme-color-a-xs:1;--theme-color-a-sm:1;--theme-color-a-md:1;--theme-color-a-lg:1;--theme-color-a-xl:1}:host svg>circle{stroke-dasharray:280;stroke-dashoffset:0;transform-origin:center;animation:dash 1.4s ease-in-out infinite;transition:stroke 0.15s ease-in-out;stroke:rgba(var(--theme-color-r-xs), var(--theme-color-g-xs), var(--theme-color-b-xs), var(--theme-color-a-xs))}@media (min-width: 576px){:host svg>circle{stroke:rgba(var(--theme-color-r-sm), var(--theme-color-g-sm), var(--theme-color-b-sm), var(--theme-color-a-sm))}}@media (min-width: 768px){:host svg>circle{stroke:rgba(var(--theme-color-r-md), var(--theme-color-g-md), var(--theme-color-b-md), var(--theme-color-a-md))}}@media (min-width: 992px){:host svg>circle{stroke:rgba(var(--theme-color-r-lg), var(--theme-color-g-lg), var(--theme-color-b-lg), var(--theme-color-a-lg))}}@media (min-width: 1200px){:host svg>circle{stroke:rgba(var(--theme-color-r-xl), var(--theme-color-g-xl), var(--theme-color-b-xl), var(--theme-color-a-xl))}}@keyframes spinner{0%{transform:rotate(0deg)}100%{transform:rotate(270deg)}}@keyframes dash{0%{stroke-dashoffset:280}50%{stroke-dashoffset:70;transform:rotate(135deg)}100%{stroke-dashoffset:280;transform:rotate(450deg)}}\";\n\nlet UiSpinner = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The theme color to be used for this spinner.\n     */\n    this.themeColor = ThemeColor.PRIMARY;\n  }\n  render() {\n    return (h(Host, null, h(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 100 100\", style: Object.assign({}, getThemeColorRgbaStyles(getValuePerBreakpointAndFillGaps(this.themeColor, ThemeColor.PRIMARY))) }, h(\"circle\", { fill: \"none\", \"stroke-width\": 6, \"stroke-linecap\": \"round\", cx: \"50\", cy: \"50\", r: \"47\" }))));\n  }\n};\nUiSpinner.style = uiSpinnerCss;\n\nexport { UiSpinner as ui_spinner };\n","/**\n * Gets the value for the given {@link Breakpoint}.\n *\n * @param breakpoint the {@link Breakpoint} to get the value for\n * @param value the {@link BreakpointAwareValue}\n */\nconst getBreakpointAwareValue = (breakpoint, value) => {\n  var _a;\n  if (value === null) {\n    return null;\n  }\n  else if (!(value instanceof Object)) {\n    return breakpoint === 'xs' ? value : null;\n  }\n  else {\n    return (_a = value[breakpoint]) !== null && _a !== void 0 ? _a : null;\n  }\n};\n/**\n * Returns a map with each {@link Breakpoint} as key pointing to the {@link Breakpoint}'s value.\n *\n * @param value the {@link BreakpointAwareValue}\n */\nconst getValuePerBreakpoint = (value) => {\n  return {\n    xs: getBreakpointAwareValue('xs', value),\n    sm: getBreakpointAwareValue('sm', value),\n    md: getBreakpointAwareValue('md', value),\n    lg: getBreakpointAwareValue('lg', value),\n    xl: getBreakpointAwareValue('xl', value)\n  };\n};\n/**\n * Returns a map with each {@link Breakpoint} as key pointing to the {@link Breakpoint}'s value or if that value was null to the previous {@link Breakpoint}'s value.\n * If all {@link Breakpoint} values are null the fallback is used.\n *\n * @param value the {@link BreakpointAwareValue}\n * @param fallback the fallback value\n */\nconst getValuePerBreakpointAndFillGaps = (value, fallback) => {\n  var _a, _b, _c, _d, _e;\n  const _valueByBreakpoint = getValuePerBreakpoint(value);\n  let prevValue = fallback;\n  return {\n    xs: prevValue = (_a = getBreakpointAwareValue('xs', _valueByBreakpoint)) !== null && _a !== void 0 ? _a : prevValue,\n    sm: prevValue = (_b = getBreakpointAwareValue('sm', _valueByBreakpoint)) !== null && _b !== void 0 ? _b : prevValue,\n    md: prevValue = (_c = getBreakpointAwareValue('md', _valueByBreakpoint)) !== null && _c !== void 0 ? _c : prevValue,\n    lg: prevValue = (_d = getBreakpointAwareValue('lg', _valueByBreakpoint)) !== null && _d !== void 0 ? _d : prevValue,\n    xl: (_e = getBreakpointAwareValue('xl', _valueByBreakpoint)) !== null && _e !== void 0 ? _e : prevValue\n  };\n};\n/**\n * Returns the given name with the {@link Breakpoint}'s as suffix.\n *\n * @param name the name to suffix\n * @param breakpoint the {@link Breakpoint}\n */\nconst withBreakpointSuffix = (name, breakpoint) => {\n  return `${name}-${breakpoint}`;\n};\n\nconst classes = (...classNames) => {\n  return classNames.filter(className => !!className).join(' ');\n};\nconst isFixed = (o) => {\n  const s = String(o);\n  return !isNaN(+s) && isFinite(+s) && (typeof o === 'number' || !/e/i.test(s));\n};\nconst mapKeys = (obj, mapper = a => a) => {\n  return Object.entries(obj)\n    .reduce((values, [key, value]) => (Object.assign(Object.assign({}, values), { [mapper(key)]: value })), {});\n};\nconst mapValues = (obj, mapper = a => a) => {\n  return Object.entries(obj)\n    .reduce((values, [key, value]) => (Object.assign(Object.assign({}, values), { [key]: mapper(value) })), {});\n};\n\nexport { mapValues as a, classes as c, getValuePerBreakpointAndFillGaps as g, isFixed as i, mapKeys as m, withBreakpointSuffix as w };\n","import { m as mapKeys, a as mapValues, w as withBreakpointSuffix } from './Common-663c63f4.js';\n\nvar ThemeColor;\n(function (ThemeColor) {\n  ThemeColor[\"PRIMARY\"] = \"PRIMARY\";\n  ThemeColor[\"SECONDARY\"] = \"SECONDARY\";\n  ThemeColor[\"INFO\"] = \"INFO\";\n  ThemeColor[\"SUCCESS\"] = \"SUCCESS\";\n  ThemeColor[\"WARNING\"] = \"WARNING\";\n  ThemeColor[\"DANGER\"] = \"DANGER\";\n  ThemeColor[\"LIGHT\"] = \"LIGHT\";\n  ThemeColor[\"DARK\"] = \"DARK\";\n})(ThemeColor || (ThemeColor = {}));\nconst getThemeColorRgba = (themeColor) => {\n  switch (themeColor) {\n    case ThemeColor.PRIMARY:\n      return { r: 44, g: 123, b: 229, a: 1 };\n    case ThemeColor.SECONDARY:\n      return { r: 110, g: 132, b: 163, a: 1 };\n    case ThemeColor.INFO:\n      return { r: 57, g: 175, b: 209, a: 1 };\n    case ThemeColor.SUCCESS:\n      return { r: 0, g: 217, b: 126, a: 1 };\n    case ThemeColor.WARNING:\n      return { r: 246, g: 195, b: 67, a: 1 };\n    case ThemeColor.DANGER:\n      return { r: 230, g: 55, b: 87, a: 1 };\n    case ThemeColor.LIGHT:\n      return { r: 237, g: 242, b: 249, a: 1 };\n    case ThemeColor.DARK:\n      return { r: 18, g: 38, b: 63, a: 1 };\n  }\n};\nconst getThemeColorRgbaStyles = (breakpointValues) => {\n  return Object.assign(Object.assign(Object.assign(Object.assign({}, mapKeys(mapValues(breakpointValues, v => `${getThemeColorRgba(v).r}`), key => withBreakpointSuffix('--theme-color-r', key))), mapKeys(mapValues(breakpointValues, v => `${getThemeColorRgba(v).g}`), key => withBreakpointSuffix('--theme-color-g', key))), mapKeys(mapValues(breakpointValues, v => `${getThemeColorRgba(v).b}`), key => withBreakpointSuffix('--theme-color-b', key))), mapKeys(mapValues(breakpointValues, v => `${getThemeColorRgba(v).a}`), key => withBreakpointSuffix('--theme-color-a', key)));\n};\n\nexport { ThemeColor as T, getThemeColorRgbaStyles as g };\n"],"sourceRoot":""}