{"version":3,"sources":["../../core/dist/esm/ui-flex.entry.js","../../core/dist/esm/Common-663c63f4.js","../../core/dist/esm/Flex-32b0a0bb.js"],"names":["UiFlex","hostRef","registerInstance","this","direction","alignItems","inline","gap","wrap","h","Host","style","Object","assign","mapKeys","mapValues","getValuePerBreakpointAndFillGaps","v","ALIGN_ITEMS_TO_CSS_VALUE_MAP","key","withBreakpointSuffix","DIRECTION_TO_CSS_VALUE_MAP","getBreakpointAwareValue","breakpoint","value","_a","fallback","_b","_c","_d","_e","_valueByBreakpoint","xs","sm","md","lg","xl","getValuePerBreakpoint","prevValue","name","classes","classNames","filter","className","join","isFixed","o","s","String","isNaN","isFinite","test","obj","mapper","a","entries","reduce","values"],"mappings":"gNAMIA,EAAM,WACR,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GAIvBE,KAAKC,UAAY,gBAIjBD,KAAKE,WAAa,QAMlBF,KAAKG,QAAS,EAIdH,KAAKI,IAAM,IAIXJ,KAAKK,MAAO,EAxBN,0CA0BR,WACE,OAAQC,YAAEC,IAAM,CAAEC,MAAOC,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIC,YAAQC,YAAUC,YAAiCb,KAAKE,WAAY,UAAU,SAAAY,GAAC,OAAIC,IAA6BD,OAAK,SAAAE,GAAG,OAAIC,YAAqB,qBAAsBD,OAAQL,YAAQE,YAAiCb,KAAKI,IAAK,MAAM,SAAAY,GAAG,OAAIC,YAAqB,aAAcD,OAAQL,YAAQC,YAAUC,YAAiCb,KAAKG,QAAQ,IAAQ,SAAAW,GAAC,OAAIA,EAAI,cAAgB,WAAS,SAAAE,GAAG,OAAIC,YAAqB,gBAAiBD,OAAQL,YAAQC,YAAUC,YAAiCb,KAAKC,UAAW,kBAAkB,SAAAa,GAAC,OAAII,IAA2BJ,OAAK,SAAAE,GAAG,OAAIC,YAAqB,mBAAoBD,OAAQL,YAAQC,YAAUC,YAAiCb,KAAKK,MAAM,IAAQ,SAAAS,GAAC,OAAIA,EAAI,OAAS,aAAW,SAAAE,GAAG,OAAIC,YAAqB,cAAeD,QAAUV,YAAE,OAAQ,WA3B12B,KA8BVT,EAAOW,MAhCW,6iD,8PCEZW,EAA0B,SAACC,EAAYC,GAC3C,IAAIC,EACJ,OAAc,OAAVD,EACK,KAEEA,aAAiBZ,OAIU,QAA5Ba,EAAKD,EAAMD,UAAgC,IAAPE,EAAgBA,EAAK,KAH3C,OAAfF,EAAsBC,EAAQ,MA2BnCR,EAAmC,SAACQ,EAAOE,GAC/C,IAAID,EAAIE,EAAIC,EAAIC,EAAIC,EACdC,EAlBsB,SAACP,GAC7B,MAAO,CACLQ,GAAIV,EAAwB,KAAME,GAClCS,GAAIX,EAAwB,KAAME,GAClCU,GAAIZ,EAAwB,KAAME,GAClCW,GAAIb,EAAwB,KAAME,GAClCY,GAAId,EAAwB,KAAME,IAYTa,CAAsBb,GAC7Cc,EAAYZ,EAChB,MAAO,CACLM,GAAIM,EAAyE,QAA5Db,EAAKH,EAAwB,KAAMS,UAAwC,IAAPN,EAAgBA,EAAKa,EAC1GL,GAAIK,EAAyE,QAA5DX,EAAKL,EAAwB,KAAMS,UAAwC,IAAPJ,EAAgBA,EAAKW,EAC1GJ,GAAII,EAAyE,QAA5DV,EAAKN,EAAwB,KAAMS,UAAwC,IAAPH,EAAgBA,EAAKU,EAC1GH,GAAIG,EAAyE,QAA5DT,EAAKP,EAAwB,KAAMS,UAAwC,IAAPF,EAAgBA,EAAKS,EAC1GF,GAAiE,QAA5DN,EAAKR,EAAwB,KAAMS,UAAwC,IAAPD,EAAgBA,EAAKQ,IAS5FlB,EAAuB,SAACmB,EAAMhB,GAClC,gBAAUgB,EAAV,YAAkBhB,IAGdiB,EAAU,WAAmB,2BAAfC,EAAe,yBAAfA,EAAe,gBACjC,OAAOA,EAAWC,QAAO,SAAAC,GAAS,QAAMA,KAAWC,KAAK,MAEpDC,EAAU,SAACC,GACf,IAAMC,EAAIC,OAAOF,GACjB,OAAQG,OAAOF,IAAMG,UAAUH,KAAoB,kBAAND,IAAmB,KAAKK,KAAKJ,KAEtEjC,EAAU,SAACsC,GAAyB,IAApBC,EAAoB,uDAAX,SAAAC,GAAC,OAAIA,GAClC,OAAO1C,OAAO2C,QAAQH,GACnBI,QAAO,SAACC,EAAD,0BAAUtC,EAAV,KAAeK,EAAf,YAA2BZ,OAAOC,OAAOD,OAAOC,OAAO,GAAI4C,GAAhC7C,OAAA,IAAAA,CAAA,GAA4CyC,EAAOlC,GAAOK,MAAW,KAEtGT,EAAY,SAACqC,GAAyB,IAApBC,EAAoB,uDAAX,SAAAC,GAAC,OAAIA,GACpC,OAAO1C,OAAO2C,QAAQH,GACnBI,QAAO,SAACC,EAAD,0BAAUtC,EAAV,KAAeK,EAAf,YAA2BZ,OAAOC,OAAOD,OAAOC,OAAO,GAAI4C,GAAhC7C,OAAA,IAAAA,CAAA,GAA4CO,EAAMkC,EAAO7B,OAAY,M,gCC1E5G,wEAAMN,EAA+B,CACnC,MAAS,aACT,OAAU,SACV,IAAO,WACP,QAAW,WAEPG,EAA6B,CACjC,gBAAiB,MACjB,gBAAiB,cACjB,gBAAiB,SACjB,gBAAiB","file":"static/js/6.dea61454.chunk.js","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-fabcdfed.js';\nimport { m as mapKeys, w as withBreakpointSuffix, a as mapValues, g as getValuePerBreakpointAndFillGaps } from './Common-663c63f4.js';\nimport { A as ALIGN_ITEMS_TO_CSS_VALUE_MAP, D as DIRECTION_TO_CSS_VALUE_MAP } from './Flex-32b0a0bb.js';\n\nconst uiFlexCss = \":host{display:flex;max-width:100%;margin:0;padding:0;line-height:1.5;--flex-inline-xs:flex;--flex-inline-sm:flex;--flex-inline-md:flex;--flex-inline-lg:flex;--flex-inline-xl:flex;--flex-align-items-xs:normal;--flex-align-items-sm:normal;--flex-align-items-md:normal;--flex-align-items-lg:normal;--flex-align-items-xl:normal;--flex-direction-xs:row;--flex-direction-sm:row;--flex-direction-md:row;--flex-direction-lg:row;--flex-direction-xl:row;--flex-gap-xs:0;--flex-gap-sm:0;--flex-gap-md:0;--flex-gap-lg:0;--flex-gap-xl:0;--flex-wrap-xs:nowrap;--flex-wrap-sm:nowrap;--flex-wrap-md:nowrap;--flex-wrap-lg:nowrap;--flex-wrap-xl:nowrap;display:var(--flex-inline-xs);align-items:var(--flex-align-items-xs);flex-direction:var(--flex-direction-xs);gap:var(--flex-gap-xs);flex-wrap:var(--flex-wrap-xs)}@media (min-width: 576px){:host{display:var(--flex-inline-sm);align-items:var(--flex-align-items-sm);flex-direction:var(--flex-direction-sm);gap:var(--flex-gap-sm);flex-wrap:var(--flex-wrap-sm)}}@media (min-width: 768px){:host{display:var(--flex-inline-md);align-items:var(--flex-align-items-md);flex-direction:var(--flex-direction-md);gap:var(--flex-gap-md);flex-wrap:var(--flex-wrap-md)}}@media (min-width: 992px){:host{display:var(--flex-inline-lg);align-items:var(--flex-align-items-lg);flex-direction:var(--flex-direction-lg);gap:var(--flex-gap-lg);flex-wrap:var(--flex-wrap-lg)}}@media (min-width: 1200px){:host{display:var(--flex-inline-xl);align-items:var(--flex-align-items-xl);flex-direction:var(--flex-direction-xl);gap:var(--flex-gap-xl);flex-wrap:var(--flex-wrap-xl)}}\";\n\nlet UiFlex = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The direction all items in the flex container are distributed.\n     */\n    this.direction = 'left-to-right';\n    /**\n     * The alignment of all items in the flex container.\n     */\n    this.alignItems = 'start';\n    /**\n     * Whether or not the container should take all the available space or not.\n     * - false takes all the available space\n     * - true takes only as much space as is required\n     */\n    this.inline = false;\n    /**\n     * Defines the width and height the gap between items in the flex container.\n     */\n    this.gap = '0';\n    /**\n     * Whether or not the container should wrap it's items to the next line when not enough space is available.\n     */\n    this.wrap = false;\n  }\n  render() {\n    return (h(Host, { style: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mapKeys(mapValues(getValuePerBreakpointAndFillGaps(this.alignItems, 'start'), v => ALIGN_ITEMS_TO_CSS_VALUE_MAP[v]), key => withBreakpointSuffix('--flex-align-items', key))), mapKeys(getValuePerBreakpointAndFillGaps(this.gap, '0'), key => withBreakpointSuffix('--flex-gap', key))), mapKeys(mapValues(getValuePerBreakpointAndFillGaps(this.inline, false), v => v ? 'inline-flex' : 'flex'), key => withBreakpointSuffix('--flex-inline', key))), mapKeys(mapValues(getValuePerBreakpointAndFillGaps(this.direction, 'left-to-right'), v => DIRECTION_TO_CSS_VALUE_MAP[v]), key => withBreakpointSuffix('--flex-direction', key))), mapKeys(mapValues(getValuePerBreakpointAndFillGaps(this.wrap, false), v => v ? 'wrap' : 'nowrap'), key => withBreakpointSuffix('--flex-wrap', key))) }, h(\"slot\", null)));\n  }\n};\nUiFlex.style = uiFlexCss;\n\nexport { UiFlex as ui_flex };\n","/**\n * Gets the value for the given {@link Breakpoint}.\n *\n * @param breakpoint the {@link Breakpoint} to get the value for\n * @param value the {@link BreakpointAwareValue}\n */\nconst getBreakpointAwareValue = (breakpoint, value) => {\n  var _a;\n  if (value === null) {\n    return null;\n  }\n  else if (!(value instanceof Object)) {\n    return breakpoint === 'xs' ? value : null;\n  }\n  else {\n    return (_a = value[breakpoint]) !== null && _a !== void 0 ? _a : null;\n  }\n};\n/**\n * Returns a map with each {@link Breakpoint} as key pointing to the {@link Breakpoint}'s value.\n *\n * @param value the {@link BreakpointAwareValue}\n */\nconst getValuePerBreakpoint = (value) => {\n  return {\n    xs: getBreakpointAwareValue('xs', value),\n    sm: getBreakpointAwareValue('sm', value),\n    md: getBreakpointAwareValue('md', value),\n    lg: getBreakpointAwareValue('lg', value),\n    xl: getBreakpointAwareValue('xl', value)\n  };\n};\n/**\n * Returns a map with each {@link Breakpoint} as key pointing to the {@link Breakpoint}'s value or if that value was null to the previous {@link Breakpoint}'s value.\n * If all {@link Breakpoint} values are null the fallback is used.\n *\n * @param value the {@link BreakpointAwareValue}\n * @param fallback the fallback value\n */\nconst getValuePerBreakpointAndFillGaps = (value, fallback) => {\n  var _a, _b, _c, _d, _e;\n  const _valueByBreakpoint = getValuePerBreakpoint(value);\n  let prevValue = fallback;\n  return {\n    xs: prevValue = (_a = getBreakpointAwareValue('xs', _valueByBreakpoint)) !== null && _a !== void 0 ? _a : prevValue,\n    sm: prevValue = (_b = getBreakpointAwareValue('sm', _valueByBreakpoint)) !== null && _b !== void 0 ? _b : prevValue,\n    md: prevValue = (_c = getBreakpointAwareValue('md', _valueByBreakpoint)) !== null && _c !== void 0 ? _c : prevValue,\n    lg: prevValue = (_d = getBreakpointAwareValue('lg', _valueByBreakpoint)) !== null && _d !== void 0 ? _d : prevValue,\n    xl: (_e = getBreakpointAwareValue('xl', _valueByBreakpoint)) !== null && _e !== void 0 ? _e : prevValue\n  };\n};\n/**\n * Returns the given name with the {@link Breakpoint}'s as suffix.\n *\n * @param name the name to suffix\n * @param breakpoint the {@link Breakpoint}\n */\nconst withBreakpointSuffix = (name, breakpoint) => {\n  return `${name}-${breakpoint}`;\n};\n\nconst classes = (...classNames) => {\n  return classNames.filter(className => !!className).join(' ');\n};\nconst isFixed = (o) => {\n  const s = String(o);\n  return !isNaN(+s) && isFinite(+s) && (typeof o === 'number' || !/e/i.test(s));\n};\nconst mapKeys = (obj, mapper = a => a) => {\n  return Object.entries(obj)\n    .reduce((values, [key, value]) => (Object.assign(Object.assign({}, values), { [mapper(key)]: value })), {});\n};\nconst mapValues = (obj, mapper = a => a) => {\n  return Object.entries(obj)\n    .reduce((values, [key, value]) => (Object.assign(Object.assign({}, values), { [key]: mapper(value) })), {});\n};\n\nexport { mapValues as a, classes as c, getValuePerBreakpointAndFillGaps as g, isFixed as i, mapKeys as m, withBreakpointSuffix as w };\n","const ALIGN_ITEMS_TO_CSS_VALUE_MAP = {\n  'start': 'flex-start',\n  'center': 'center',\n  'end': 'flex-end',\n  'stretch': 'stretch'\n};\nconst DIRECTION_TO_CSS_VALUE_MAP = {\n  'left-to-right': 'row',\n  'right-to-left': 'row-reverse',\n  'top-to-bottom': 'column',\n  'bottom-to-top': 'column-reverse'\n};\n\nexport { ALIGN_ITEMS_TO_CSS_VALUE_MAP as A, DIRECTION_TO_CSS_VALUE_MAP as D };\n"],"sourceRoot":""}