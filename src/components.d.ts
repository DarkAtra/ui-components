/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import {HTMLStencilElement, JSXBase} from "@stencil/core/internal";
import {BreakpointAwareValue} from "./utils/Breakpoint";
import {ThemeColor} from "./utils/ThemeColor";
import {Size} from "./utils/Size";
import {FlexAlignItems, FlexDirection, FlexGap} from "./components/ui-flex/ui-flex";

export namespace Components {
    interface UiButton {
        /**
         * Whether or not this button is disabled.
         */
        "disabled": boolean;
        /**
         * The location this button should link to.
         */
        "href"?: string;
        /**
         * Whether or not this button should use the outline styles for the provided theme or not.
         */
        "outline": BreakpointAwareValue<boolean>;
        /**
         * The size of this button.
         */
        "size": BreakpointAwareValue<Size>;
        /**
         * The theme color to be used for this button.
         */
        "themeColor": BreakpointAwareValue<ThemeColor>;
    }

    interface UiFlex {
        /**
         * The alignment of all items in the flex container.
         */
        "alignItems": BreakpointAwareValue<FlexAlignItems>;
        /**
         * The direction all items in the flex container are distributed.
         */
        "direction": BreakpointAwareValue<FlexDirection>;
        /**
         * Defines the width and height the gap between items in the flex container.
         */
        "gap": BreakpointAwareValue<FlexGap>;
        /**
         * Whether or not the container should take all the available space or not. - false takes all the available space - true takes only as much space as is required
         */
        "inline": BreakpointAwareValue<boolean>;
        /**
         * Whether or not the container should wrap it's items to the next line when not enough space is available.
         */
        "wrap": BreakpointAwareValue<boolean>;
    }
}
declare global {
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }

    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new(): HTMLUiButtonElement;
    };

    interface HTMLUiFlexElement extends Components.UiFlex, HTMLStencilElement {
    }

    var HTMLUiFlexElement: {
        prototype: HTMLUiFlexElement;
        new(): HTMLUiFlexElement;
    };

    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-flex": HTMLUiFlexElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        /**
         * Whether or not this button is disabled.
         */
        "disabled"?: boolean;
        /**
         * The location this button should link to.
         */
        "href"?: string;
        /**
         * Whether or not this button should use the outline styles for the provided theme or not.
         */
        "outline"?: BreakpointAwareValue<boolean>;
        /**
         * The size of this button.
         */
        "size"?: BreakpointAwareValue<Size>;
        /**
         * The theme color to be used for this button.
         */
        "themeColor"?: BreakpointAwareValue<ThemeColor>;
    }

    interface UiFlex {
        /**
         * The alignment of all items in the flex container.
         */
        "alignItems"?: BreakpointAwareValue<FlexAlignItems>;
        /**
         * The direction all items in the flex container are distributed.
         */
        "direction"?: BreakpointAwareValue<FlexDirection>;
        /**
         * Defines the width and height the gap between items in the flex container.
         */
        "gap"?: BreakpointAwareValue<FlexGap>;
        /**
         * Whether or not the container should take all the available space or not. - false takes all the available space - true takes only as much space as is required
         */
        "inline"?: BreakpointAwareValue<boolean>;
        /**
         * Whether or not the container should wrap it's items to the next line when not enough space is available.
         */
        "wrap"?: BreakpointAwareValue<boolean>;
    }

    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-flex": UiFlex;
    }
}
export {LocalJSX as JSX};
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-flex": LocalJSX.UiFlex & JSXBase.HTMLAttributes<HTMLUiFlexElement>;
        }
    }
}
