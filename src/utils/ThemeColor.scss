@import "src/utils/Breakpoint";
@import "src/utils/Common";

$theme-color-css-variable-name: theme-color;

@mixin breakpoint-aware-css-color-variables($name, $default-value: (r: 0,g: 0,b: 0,a: 1)) {
  @include breakpoint-aware-css-variable(#{$name}-r, map-get($default-value, r));
  @include breakpoint-aware-css-variable(#{$name}-g, map-get($default-value, g));
  @include breakpoint-aware-css-variable(#{$name}-b, map-get($default-value, b));
  @include breakpoint-aware-css-variable(#{$name}-a, map-get($default-value, a));
}

@function rgba($color) {
  @return #{"rgba(#{map-get($color, r)}, #{map-get($color, g)}, #{map-get($color, b)}, #{map-get($color, a)})"};
}

$yiq-contrasted-threshold: 150 !default;
$contrast_color_light: (r: 255, g: 255, b: 255, a: 1);
$contrast_color_dark: (r: 40, g: 62, b: 89, a: 1);

@function conditional-color($condition, $true_color, $false_color) {
  @return (
    r: conditional($condition, map-get($true_color, r), map-get($false_color, r)),
    g: conditional($condition, map-get($true_color, g), map-get($false_color, g)),
    b: conditional($condition, map-get($true_color, b), map-get($false_color, b)),
    a: conditional($condition, map-get($true_color, a), map-get($false_color, a))
  );
}

@function contrast-color($color, $light: $contrast_color_light, $dark: $contrast_color_dark) {
  $r: #{map-get($color, r)};
  $g: #{map-get($color, g)};
  $b: #{map-get($color, b)};

  // TODO: should also take the alpha of the color into account
  $yiq: "((#{$r} * 299) + (#{$g} * 587) + (#{$b} * 114)) - #{$yiq-contrasted-threshold} * 1000";

  $is_below_threshold: "min(min(#{$yiq}, 0) * -1, 1)";

  @return conditional-color(
      $is_below_threshold,
      $light,
      $dark
  );
}

@function darken($color, $amount) {
  @return (
    r: calc(#{map-get($color, r)} * (1 - #{$amount})),
    g: calc(#{map-get($color, g)} * (1 - #{$amount})),
    b: calc(#{map-get($color, b)} * (1 - #{$amount})),
    a: #{map-get($color, a)}
  )
}

@function mix($first-color, $second-color, $weight) {
  @return (
    r: calc(#{map-get($first-color, r)} + (#{map-get($second-color, r)} - #{map-get($first-color, r)}) * #{$weight} * 0.01),
    g: calc(#{map-get($first-color, g)} + (#{map-get($second-color, g)} - #{map-get($first-color, g)}) * #{$weight} * 0.01),
    b: calc(#{map-get($first-color, b)} + (#{map-get($second-color, b)} - #{map-get($first-color, b)}) * #{$weight} * 0.01),
    a: calc(#{map-get($first-color, a)} + (#{map-get($second-color, a)} - #{map-get($first-color, a)}) * #{$weight} * 0.01)
  );
}


