@import "src/utils/Breakpoint";
@import "src/utils/Size";
@import "src/utils/ThemeColor";

$button-padding-y: .375rem;
$button-padding-x: .75rem;
$button-border-radius: .375rem;
$button-prefix-suffix-gap: .375rem;
$outline-css-variable-name: outline;

:host {
    display: contents;
}

.button {
    display: inline-flex;
    align-items: center;
    position: relative;
    background-color: transparent;
    border: 1px solid transparent;
    border-radius: $button-border-radius;
    gap: $button-prefix-suffix-gap;
    user-select: none;
    appearance: none;
    text-align: center;
    outline: none !important;
    text-decoration: none !important;
    line-height: $line-height-base;
    transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;

    &:not(:disabled):not(.disabled) {
        cursor: pointer;
    }

    &:disabled, &.disabled {
        opacity: 60%;
    }

    // theme-color with css variables for each breakpoint
    @include breakpoint-aware-css-color-variables($theme-color-css-variable-name);
    @include breakpoint-aware-css-variable($size-css-variable-name, 1);
    @include breakpoint-aware-css-variable($outline-css-variable-name, 0);

    // color, background-color, border-color according to the theme-color
    // padding, font-size according to the size
    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint);

        @include breakpoint-up($breakpoint) {
            $color: (r:var(--#{$theme-color-css-variable-name}-r#{$infix}), g:var(--#{$theme-color-css-variable-name}-g#{$infix}), b:var(--#{$theme-color-css-variable-name}-b#{$infix}), a:var(--#{$theme-color-css-variable-name}-a#{$infix}));

            color: rgba(conditional-color(
                    var(--#{$outline-css-variable-name}#{$infix}),
                    $color,
                    contrast-color($color)
            ));
            background-color: rgba(conditional-color(
                    var(--#{$outline-css-variable-name}#{$infix}),
                    (r:255, g:255, b:255, a:0),
                    $color
            ));
            border-color: rgba($color);
            font-size: calc(#{$font-size-base} * var(--#{$size-css-variable-name}#{$infix}));
            padding: calc(#{$button-padding-y} * var(--#{$size-css-variable-name}#{$infix})) calc(#{$button-padding-x} * var(--#{$size-css-variable-name}#{$infix}));

            &:not(:disabled):not(.disabled) {
                &:hover, &:focus, &:focus-within {
                    color: rgba(contrast-color(darken($color, .075)));
                    background-color: rgba(darken($color, .075));
                    border-color: rgba(darken($color, .1));
                }

                &:focus, &:focus-within {
                    box-shadow: 0 0 0 .15rem rgba(mix($color, (r: 255, g: 255, b: 255, a: .5), 50));
                }

                &:active, &.active {
                    color: rgba(contrast-color(darken($color, .1)));
                    background-color: rgba(darken($color, .1));
                    border-color: rgba(darken($color, .125));
                }
            }
        }
    }

    > .prefix {
        display: flex;
        flex-direction: column;
    }

    > .content {
        display: flex;
        flex-direction: column;
    }

    > .suffix {
        display: flex;
        flex-direction: column;
    }
}
